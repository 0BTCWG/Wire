name: Rust CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      
      - name: Check code formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      
      - name: Lint with clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --verbose
      
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose
      
      - name: Build examples
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --examples --verbose

  wasm-build:
    name: Build WASM Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          target: wasm32-unknown-unknown
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM package
        run: wasm-pack build --target web
      
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wasm-package
          path: pkg/

  release:
    name: Create Release
    needs: [build, wasm-build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      
      - name: Download WASM artifacts
        uses: actions/download-artifact@v3
        with:
          name: wasm-package
          path: pkg/
      
      - name: Build release binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      
      - name: Create release archive
        run: |
          mkdir -p release
          cp target/release/wire release/
          cp -r examples release/
          cp -r docs release/
          cp README.md release/
          tar -czf wire-${{ github.ref_name }}.tar.gz -C release .
          zip -r wire-${{ github.ref_name }}.zip release/
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: 0BTC Wire ${{ github.ref_name }}
          draft: false
          prerelease: false
      
      - name: Upload Release Assets (tar.gz)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wire-${{ github.ref_name }}.tar.gz
          asset_name: wire-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip
      
      - name: Upload Release Assets (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./wire-${{ github.ref_name }}.zip
          asset_name: wire-${{ github.ref_name }}.zip
          asset_content_type: application/zip
      
      - name: Upload WASM Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pkg/wire_wasm.js
          asset_name: wire_wasm.js
          asset_content_type: application/javascript
