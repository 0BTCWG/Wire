name: Rust CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config
      
      - name: Check code formatting
        run: cargo fmt --all -- --check
      
      - name: Lint with clippy
        run: cargo clippy -- -D warnings || true
      
      - name: Build
        run: cargo build --verbose
      
      - name: Run tests
        run: cargo test --lib --verbose
      
      - name: Build examples
        run: cargo build --examples --verbose

  wasm-build:
    name: Build WASM Package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          targets: wasm32-unknown-unknown
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev pkg-config
      
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
      - name: Build WASM package
        run: wasm-pack build --target web || true
      
      - name: Upload WASM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wasm-package
          path: pkg/
          if-no-files-found: warn

  release:
    name: Create Release
    needs: [build, wasm-build]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create release archives
        run: |
          mkdir -p release
          cd artifacts
          
          # Create WASM package
          if [ -d "wasm-package" ]; then
            cd wasm-package
            zip -r ../../release/wire-wasm.zip .
            cd ..
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/wire-wasm.zip
          draft: false
          prerelease: false
          generate_release_notes: true
