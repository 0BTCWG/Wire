name: Cross-Platform Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        target: ${{ matrix.target }}
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev pkg-config

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl@3
        echo 'export OPENSSL_DIR=$(brew --prefix openssl@3)' >> $GITHUB_ENV

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg install openssl:x64-windows
        echo "OPENSSL_DIR=C:/vcpkg/installed/x64-windows" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=C:/vcpkg/installed/x64-windows/lib" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=C:/vcpkg/installed/x64-windows/include" >> $GITHUB_ENV

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release --verbose

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --release --verbose

    - name: Build WASM package
      if: success()
      run: |
        cargo install wasm-pack --force
        wasm-pack build --target web --out-dir pkg

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wire-${{ matrix.target }}
        path: |
          target/release/wire*
          pkg/
        if-no-files-found: error

  create-release-packages:
    name: Create Release Packages
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Create release packages
      run: |
        mkdir -p release
        
        # Linux package
        mkdir -p linux-package/bin
        cp artifacts/wire-x86_64-unknown-linux-gnu/target/release/wire linux-package/bin/
        cp -r docs linux-package/
        cp README.md linux-package/
        cp LICENSE linux-package/ || echo "No LICENSE file found"
        tar -czvf release/wire-linux-x86_64.tar.gz -C linux-package .
        
        # Windows package
        mkdir -p windows-package/bin
        cp artifacts/wire-x86_64-pc-windows-msvc/target/release/wire.exe windows-package/bin/
        cp -r docs windows-package/
        cp README.md windows-package/
        cp LICENSE windows-package/ || echo "No LICENSE file found"
        zip -r release/wire-windows-x86_64.zip windows-package
        
        # macOS package
        mkdir -p macos-package/bin
        cp artifacts/wire-x86_64-apple-darwin/target/release/wire macos-package/bin/
        cp -r docs macos-package/
        cp README.md macos-package/
        cp LICENSE macos-package/ || echo "No LICENSE file found"
        tar -czvf release/wire-macos-x86_64.tar.gz -C macos-package .
        
        # WASM package
        mkdir -p wasm-package
        cp -r artifacts/wire-x86_64-unknown-linux-gnu/pkg/* wasm-package/
        cp -r docs/api_reference.md wasm-package/
        cp -r docs/integration_guide.md wasm-package/
        cp -r docs/usage_examples.md wasm-package/
        zip -r release/wire-wasm.zip wasm-package
    
    - name: Upload release packages
      uses: actions/upload-artifact@v3
      with:
        name: release-packages
        path: release/
        if-no-files-found: error
