name: Cross-Platform Build and Test

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@nightly
      with:
        targets: ${{ matrix.target }}

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}
        cache-on-failure: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libssl-dev pkg-config

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install openssl@3
        echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=$(brew --prefix openssl@3)/include" >> $GITHUB_ENV
        echo "OPENSSL_LIB_DIR=$(brew --prefix openssl@3)/lib" >> $GITHUB_ENV

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg integrate install
        vcpkg install openssl:x64-windows
        echo "OPENSSL_DIR=C:/vcpkg/installed/x64-windows" >> $env:GITHUB_ENV
        echo "OPENSSL_LIB_DIR=C:/vcpkg/installed/x64-windows/lib" >> $env:GITHUB_ENV
        echo "OPENSSL_INCLUDE_DIR=C:/vcpkg/installed/x64-windows/include" >> $env:GITHUB_ENV
        echo "VCPKGRS_DYNAMIC=1" >> $env:GITHUB_ENV

    - name: Build
      run: cargo build --release --verbose

    - name: Run tests
      run: cargo test --lib --release --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wire-${{ matrix.target }}
        path: |
          target/release/wire*
          target/release/*.dll
          target/release/*.dylib
          target/release/*.so
        if-no-files-found: warn

  create-release-packages:
    name: Create Release Packages
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create release archives
      run: |
        mkdir -p release
        
        # Linux
        if [ -d "artifacts/wire-x86_64-unknown-linux-gnu" ]; then
          mkdir -p wire-linux-x86_64
          cp -r artifacts/wire-x86_64-unknown-linux-gnu/* wire-linux-x86_64/
          cp README.md LICENSE wire-linux-x86_64/
          tar -czf release/wire-linux-x86_64.tar.gz wire-linux-x86_64
        fi
        
        # Windows
        if [ -d "artifacts/wire-x86_64-pc-windows-msvc" ]; then
          mkdir -p wire-windows-x86_64
          cp -r artifacts/wire-x86_64-pc-windows-msvc/* wire-windows-x86_64/
          cp README.md LICENSE wire-windows-x86_64/
          zip -r release/wire-windows-x86_64.zip wire-windows-x86_64
        fi
        
        # macOS
        if [ -d "artifacts/wire-x86_64-apple-darwin" ]; then
          mkdir -p wire-macos-x86_64
          cp -r artifacts/wire-x86_64-apple-darwin/* wire-macos-x86_64/
          cp README.md LICENSE wire-macos-x86_64/
          tar -czf release/wire-macos-x86_64.tar.gz wire-macos-x86_64
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          release/wire-linux-x86_64.tar.gz
          release/wire-windows-x86_64.zip
          release/wire-macos-x86_64.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
